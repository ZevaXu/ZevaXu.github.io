<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Zeva`s Space</title>
        <link>https://ZevaXu.github.io/</link>
        <description>Blog &amp; Note about Zeva</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 31 May 2022 16:10:30 &#43;0800</lastBuildDate>
            <atom:link href="https://ZevaXu.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>跨境支付100词</title>
    <link>https://ZevaXu.github.io/%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98100%E8%AF%8D/</link>
    <pubDate>Tue, 31 May 2022 16:10:30 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/%E8%B7%A8%E5%A2%83%E6%94%AF%E4%BB%98100%E8%AF%8D/</guid>
    <description><![CDATA[跨境支付100词   IBAN，是指国际银行帐户号码（The International Bank Account Number），通常简称IBAN，是由欧洲银行标准委员会（ European Committee for Banking Standards，简称 ECBS）按照其标准制定的一个银行帐户号码。参加ECBS的会员国的银行帐户号码都有一个对应杜IBAN号码。可以联系你的开户行获取IBAN号码。IBAN号码最多是34位字符串。IBAN的编号规定包括国别代码＋银行代码＋地区＋账户人账号＋校验码，当在欧元区未使用IBAN账号时，会被额外收取人工干预费。中国的银行是没有IBAN号码的，IBAN只适用于欧洲。此码没有SWIFT CODE普遍。
**人话：**是欧洲内部使用的一套银行卡账户系统，每个iban代表一个银行卡账户。
  SWIFT Code，该号相当于各个银行的身份证号。每个银行(包括每个分行、支行)都有一个代码，是由银行名称的英文缩写和总行所在地的英文缩写(也有用数字加字母表示某城市的)以及该分行所在地的代码(字母、数字或混合)组成。
在国际上，银行的SWIFT Code 都是统一的格式，例如：BKCHCNBJ110 ，1-4位为一家银行的统一代码(中国银行为BKCH)，5-6位代表国家代码(中国为CN)，7-8位代表城市代码(北京为BJ)，110代表北京市分行。其中总行的SWIFT Code没有所在地代码，位数为8位(如中国银行总行BKCHCNBJ)，其余都为11位。
查询各个银行的swift代码：swift代码查询
  ABA(ROUTING NUMBE),是指美国银行家协会（American Bankers Association ），按照其标准制定的一个银行帐户号码，通常是美国的银行才有，9位数字，叫做 ABA Number，也就是它们的 Routing Number，也称作 Routing Transit Number 或 ABA Number，它是由ABA(美国银行家协会)在美联储监管和协助下提出的金融机构识别码，很多金融机构都有一个，主要用于和银行相关的交易，转帐，清算等的路由确认，由9位值(不是数！8位内容加1个校验码)构成。我们收到的美国支票，通常在其正面左下角都印有上该银行的Routing Number。
**人话：**类似swift code，同样是美国各个银行或金融机构的身份证。美国的银行一般只使用Routing Number，几乎不用Swift Code。
  电汇（telegraphic transfer，T/T），是一种电子转帐方式，可以通过这种方式直接在您的银行账户中接收资金或发出资金。类似银行转账。
  支票账户，是一种最基本的交易账户，可用于日常生活消费，类似国内的活期借记卡，钱存进去可以进行消费，几乎没有利息。
  储蓄账户，支票账户用于日常交易，储蓄账户则可以帮助您实现短期和长期储蓄目标，可以赚取利息，储备资金，不可用做日常消费。
  ]]></description>
</item><item>
    <title>Vim常用命令</title>
    <link>https://ZevaXu.github.io/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</link>
    <pubDate>Mon, 09 May 2022 10:32:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/vim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</guid>
    <description><![CDATA[一般模式 一般模式即初次进入vim页面时的默认模式，此时可以进行移动光标、复制、粘贴、删除和查找等操作。
移动光标 以页为单位   ctrl + f 向下移动一页
  ctrl + b 向上移动一页
  以行为单位   G 移到文件最后行
  n + G 移到文件第n行
  n + 回车 向下移动n行
  gg 移动到文件首行
  以字符为单位   0 移到行首
  $ 移到行尾
  3 + 空格 向右移动3个字符
  搜索与替换   /word 光标向下搜索
  ？word 光标向4上搜索
  n 继续搜光标下一个]]></description>
</item><item>
    <title>Shell语言基础</title>
    <link>https://ZevaXu.github.io/shell%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Mon, 09 May 2022 10:07:25 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/shell%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[变量 read 从键盘输入读取变量
1 2 3 4 5  read [-pt] variable -p 提示 -t 时间 read -p &#34;Please keyin your name: &#34; -t 30 named   ​	declare / typeset 宣告变量的类型
1 2 3 4 5 6 7 8 9  declare [-aixr] variable -a 数组类型 -i 整数类型 -x 环境变量类型 -r 设置为只读类型 默认类型为字符串 declare -i sum=100+200+300 echo ${sum}    默认类型为字符串 只能计算整数类型（1/3=0）  命令别名 alias 给指令设置别名，新创一个新的指令， 你可以直接下达该指令]]></description>
</item><item>
    <title>Acme申请ssl证书</title>
    <link>https://ZevaXu.github.io/acme%E7%94%B3%E8%AF%B7ssl%E8%AF%81%E4%B9%A6/</link>
    <pubDate>Mon, 09 May 2022 10:05:39 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/acme%E7%94%B3%E8%AF%B7ssl%E8%AF%81%E4%B9%A6/</guid>
    <description><![CDATA[acme申请SSL证书 说明 按照官方的文档 中的通过添加域名解析API的方法操作了n次，一直不成功，索性用简单的standalone方法来申请吧。
准备条件  准备好域名 域名解析到VPS上 VPS的80端口开放  步骤 1. 安装acme.sh curl https://get.acme.sh | sh -s email=my@example.com my@example.com替换成自己邮箱，随意填写应该也没问题，不要求验证。 如官方文档中说的，此命令会执行三个操作
 把 acme.sh 安装到你的 home 目录下~/.acme.sh 创建 一个 bash 的 alias, 方便你的使用: alias acme.sh=~/.acme.sh/acme.sh 自动为你创建 cronjob, 每天 0:00 点自动检测所有的证书, 如果快过期了, 需要更新, 则会自动更新证书.  2. 生成证书 如果你还没有运行任何 web 服务, 80 端口是空闲的, 那么 acme.sh 还能假装自己是一个webserver, 临时听在80 端口, 完成验证: acme.sh --issue -d mydomain.com --standalone mydomain.com替换为自己的域名
当命令行有下图所示输出，表示成功了 3. 安装证书 前面证书生成以后, 接下来需要把证书 copy 到真正需要用它的地方.]]></description>
</item><item>
    <title>Linux账号管理</title>
    <link>https://ZevaXu.github.io/linux%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/</link>
    <pubDate>Mon, 09 May 2022 10:04:08 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/linux%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[Linux 账号与群组 UID与GID 每个登陆的使用者至少都会取得两个 ID ，一个是使用者 ID （User ID ，简称 UID）、一个是群组 ID （Group ID ，简称 GID）
  /etc/passwd :存放uid相关信息
1  用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell     /etc/group: 存放gid群组信息
  /etc/shadow：存放密码信息
1  用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间：账号失效时间：保留字段   详情
  1 2 3 4 5 6 7 8  # 查看用户id id ubuntu # 查看支持的群组 第一个输出的群组即为有效群组 groups # 切换有效群组 newgrp docker   账号管理 useradd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  useradd [-u UID] [-g 初始群组] [-G 次要群组] [-mM] [-c 说明] [-d 主文件夹路径] [-s shell] 账号名 -u 数字，指定一个uid -g 初始群组 -G 可加入的其他群组 -M 强制，不创建主文件夹 -m 默认，创建主文件夹，权限700 -c 说明内容 -d 指定某个路径为主文件夹 -r 创建系统账号 -s 接shell -e 账号失效日期&#39;YYYY-MM-DD&#39;,对于shadow第8个字段 -f 指定密码失效时间 0表示立刻失效，-1 表示永不失效 # 创建账号 useradd test # 设置密码 passwd test    在 /etc/passwd 里面创建一行与帐号相关的数据，包括创建 UID/GID/主文件夹等； 在 /etc/shadow 里面将此帐号的密码相关参数填入，但是尚未有密码； 在 /etc/group 里面加入一个与帐号名称一模一样的群组名称； 在 /home 下面创建一个与帐号同名的目录作为使用者主文件夹，且权限为 700 /etc/default/useradd 文件包含创建用户的初始化详细设定  passwd 设置密码]]></description>
</item><item>
    <title>Linux软链接和硬链接</title>
    <link>https://ZevaXu.github.io/linux%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/</link>
    <pubDate>Mon, 09 May 2022 10:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/linux%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/</guid>
    <description><![CDATA[Hard link 实体链接、硬链接
预备知识  每个文件都会占用一个 inode ，文件内容由 inode 的记录来指向； 想要读取该文件，必须要经过目录记录的文件名来指向到正确的 inode 号码才能读取。 文件名只与目录有关，但是文件内容则与 inode 有关。  原理 hard link是在某个目录下新增一个文件名，连接到某个inode号码。
1  ll -i [文件名] # 显示文件的inode号码   建立一个硬链接后，再次查看两个文件名的inode。
两个是一样的，权限字段后的数字2表示有多少个文件名链接到此inode。
好处 如果你将任何一个“文件名”删除，其实 inode 与 block 都还是存在的！ 此时你可以通过另一个“文件名”来读取到正确的文件数据喔！此外，不论你使用哪个“文件名”来编辑， 最终的结果都会写入到相同的 inode 与 block 中，因此均能进行数据的修改。
限制  不支持为目录创建hard link 不能跨文件系统  Symbolic link 符号链接、软链接
Symbolic link 就是在创建一个独立的文件，而这个文件会让数据的读取指向他 link 的那个文件的文件名！由于只是利用文件来做为指向的动作， 所以，当来源文件被删除之后，symbolic link 的文件会“开不了”，也就是找不到原始的文件名。
实操 删除之前创建的硬链接，再新建一个软链接，可以看到，实际上是新建立的一个新的文件，拥有和原始文件不同的inode。
该文件大小是7bytes，是因为箭头右边的文件名字符数量是7个。
这个 Symbolic Link 与 Windows 的捷径可以给他划上等号，由 Symbolic link所创建的文件为一个独立的新的文件，所以会占用掉 inode 与 block 。]]></description>
</item><item>
    <title>VPS配置SSH密钥登录</title>
    <link>https://ZevaXu.github.io/vps%E9%85%8D%E7%BD%AEssh%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</link>
    <pubDate>Mon, 09 May 2022 09:57:42 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/vps%E9%85%8D%E7%BD%AEssh%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</guid>
    <description><![CDATA[基本配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #新建一个user sudo useradd -d /home/xzh xzh # 为其设置密码 passwd xzh # 配置基本配置文件（环境变量等） cp ./bashrc /home/xzh/.bashrc cp ./bash_profile /home/xzh/.bash_profile # 改变 配置文件属性 chown xzh /home/xzh/.bashrc chmod 760 /home/xzh/.bash_profile # 自定义$PS1变量（每条命令前面显示的格式） PS1=&#34;\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@\h \[\e[36;40m\]\w\[\e[0m\]]\\$ &#34; 追加到.bashrc中 # 切换到xzh su xzh   通过密码登录VPS 1 2 3  # 通过ssh登录到主机 ssh xzh@ip &gt;&gt; 输入密码   配置ssh_key登录VPS 1  ssh-keygen -t rsa # 生成一对 rsa 私钥和公钥在 ～/.]]></description>
</item><item>
    <title>Git命令 基础</title>
    <link>https://ZevaXu.github.io/git%E5%91%BD%E4%BB%A4-%E5%9F%BA%E7%A1%80/</link>
    <pubDate>Sun, 08 May 2022 12:00:52 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/git%E5%91%BD%E4%BB%A4-%E5%9F%BA%E7%A1%80/</guid>
    <description><![CDATA[git config Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在一个配置文件中。
查看文件位置以及所有的配置： 1 2 3  git config --list --show-origin &gt; /opt/homebrew/etc/   用户信息 1 2  git config --global user.name &#34;John Doe&#34; git config --global user.email johndoe@example.com   查看配置信息 1  git config --list(-l)   获取git仓库 通常有两种获取 Git 项目仓库的方式：
 将尚未进行版本控制的本地目录转换为 Git 仓库； 从其它服务器 克隆 一个已存在的 Git 仓库。  两种方式都会在你的本地机器上得到一个工作就绪的 Git 仓库。
本地目录转换为 Git 仓库 1 2 3 4 5 6 7  cd project_path # 空文件夹 git init.]]></description>
</item><item>
    <title>甲骨文VPS搭建trojan步骤</title>
    <link>https://ZevaXu.github.io/%E7%94%B2%E9%AA%A8%E6%96%87vps%E6%90%AD%E5%BB%BAtrojan%E6%AD%A5%E9%AA%A4/</link>
    <pubDate>Sun, 20 Mar 2022 14:41:05 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/%E7%94%B2%E9%AA%A8%E6%96%87vps%E6%90%AD%E5%BB%BAtrojan%E6%AD%A5%E9%AA%A4/</guid>
    <description><![CDATA[甲骨文VPS搭建trojan步骤 VPS准备 需要一台IP没有被墙的VPS，也就是不开代理的情况下可以通过SSH连接到 VPS。我自己用的是甲骨文的机器，甲骨文机器可以在不清除数据的情况下随时更改IP地址，这样的好处是，如果后续该ip被墙了，换一个ip，改一下域名解析就可以接着用。
防火墙设置 ssh连接到VPS后，现在VPS提供商（我的是甲骨文）控制面板里更改防火墙设置。放行需要用到的端口（这里不建议打开所有端口）。
之后，再去VPS实例里面更改防火墙设置，我的机器是centos8系统，用Firewalld命令更改防火墙设置。
1 2 3 4 5 6 7 8  # 列出已开启的端口/服务 firewall-cmd --list-all # 开启端口 firewall-cmd --zone=public --permanent --add-port 8080/tcp # 重载配置 firewall-cmd --reload   安装docker以及拉取要用的镜像 安装docker参照docker官方文档
安装好docker后拉取trojan镜像。
1 2  # 拉取数据库，此处的端口映射、root密码、数据库名称都可以改 docker run --name trojan-mariadb --restart=always -p 3308:3306 -v /root/trojan_docker/mariadb:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=trojan_zeva -e MYSQL_ROOT_HOST=% -e MYSQL_DATABASE=trojan -d mariadb:10.2   此处需要注意，容器端口的选择不能是已经被占用的端口，不然会报错。
1 2 3 4 5 6 7 8  #拉取trojan镜像 docker run -it -d --name trojan --net=host --restart=always -v /root/trojan_docker/root/:/root/ --privileged jrohy/trojan init # 进入容器 docker exec -it trojan bash #开启trojan 会自动开始安装 按提示输入信息即可 trojan   此时可能有一些问题：]]></description>
</item><item>
    <title>部署web应用程序到centos系统遇到的防火墙问题及解决</title>
    <link>https://ZevaXu.github.io/%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%B0centos%E7%B3%BB%E7%BB%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</link>
    <pubDate>Wed, 26 Jan 2022 22:59:59 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%B0centos%E7%B3%BB%E7%BB%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</guid>
    <description><![CDATA[最初的目的 最近用go写了一个在线剪贴板的web小项目，在本地主机上调试了感觉还行，遂打算部署到甲骨文的VPS上（centos-8）。
环境搭建好了之后，成功运行在8080端口，curl localhost:8080也可以正常获取到网页，但是我的浏览器远程就是无法访问。在stackoverflow搜索了解，感觉是VPS防火墙的问题。并有了以下的解决步骤。此外，在解决问题的过程中还发现了一个有趣的小工具&ndash;cockpid,一个在web端管理VPS的工具，是centos和redhat系统自带的。
解决过程 在开始之前，首先去VPS提供商管理页面设置好相应的防火墙规则。之后在对VPS的防火墙设置规则。
  查看VPS防火墙状态： sudo systemctl status firewalld 可以看到防火墙是正常运行的。
  查看VPS防火墙开启的端口和服务 firewall-cmd --list-all 可以看到，我的VPS开启了cockpit dhcpv6-client http ssh这些个服务，以及一个8080端口（这是我主动开启之后的显示，一开始只有cockpit dhcpv6-client ssh这三项）。
如果想要查看某个服务占据的端口，可以用grep ssh /etc/services这个命令(以ssh为例)，可以看到ssh使用的是本机22端口。   开启希望的服务和端口。 开启http服务（即80端口）：sudo firewall-cmd --add-service=http --permanent 开启自定义端口：firewall-cmd --zone=public --permanent --remove-port 8080 不仅可以开端口，也可以关：firewall-cmd --zone=public --permanent --remove-service http
但是最后一定要重载以下使之生效：firewall-cmd --reload
之后可以再用firewall-cmd --list-all命令查看有没有成功。
  4.经过上述操作，我已经可以通过浏览器正常访问到我部署的web服务了，大功告成！ Cockpid 在之前查看VPS防火墙开启的端口和服务一步骤中，我看到有个名叫Cockpid的服务，一开始以为是个恶意程序（挖坑、肉鸡）,谨慎的上谷歌查了查，原来这家伙是centos自带的一个web端LINUX系统管理程序，这是它的官网（https://cockpit-project.org），这是它的一些介绍,以及安装过程。
安装好之后，只需要打开URL（VPD的域名或IP地址:9090），即可使用。下图是cockpid的登陆界面： 我的VPS设置为ssh keys方式登陆，cockpid网页似乎只能通过用户名和密码登录，于是我先建了一个用户并登录，这是有关linux如何创建用户的说明。
以下是cockpid提供的一些功能截图： 参考： [1] How to open and close ports on RHEL 8 / CentOS 8 Linux [2] How To Open Port 80 on CentOS [3] How to List Open Ports in Firewalld]]></description>
</item></channel>
</rss>

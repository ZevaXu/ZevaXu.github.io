<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Linux - Tag - Zeva`s Space</title>
        <link>https://ZevaXu.github.io/tags/linux/</link>
        <description>Linux - Tag - Zeva`s Space</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 09 May 2022 10:04:08 &#43;0800</lastBuildDate><atom:link href="https://ZevaXu.github.io/tags/linux/" rel="self" type="application/rss+xml" /><item>
    <title>Linux账号管理</title>
    <link>https://ZevaXu.github.io/linux%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/</link>
    <pubDate>Mon, 09 May 2022 10:04:08 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/linux%E8%B4%A6%E5%8F%B7%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[Linux 账号与群组 UID与GID 每个登陆的使用者至少都会取得两个 ID ，一个是使用者 ID （User ID ，简称 UID）、一个是群组 ID （Group ID ，简称 GID）
  /etc/passwd :存放uid相关信息
1  用户名：密码：UID（用户ID）：GID（组ID）：描述性信息：主目录：默认Shell     /etc/group: 存放gid群组信息
  /etc/shadow：存放密码信息
1  用户名：加密密码：最后一次修改时间：最小修改时间间隔：密码有效期：密码需要变更前的警告天数：密码过期后的宽限时间：账号失效时间：保留字段   详情
  1 2 3 4 5 6 7 8  # 查看用户id id ubuntu # 查看支持的群组 第一个输出的群组即为有效群组 groups # 切换有效群组 newgrp docker   账号管理 useradd 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  useradd [-u UID] [-g 初始群组] [-G 次要群组] [-mM] [-c 说明] [-d 主文件夹路径] [-s shell] 账号名 -u 数字，指定一个uid -g 初始群组 -G 可加入的其他群组 -M 强制，不创建主文件夹 -m 默认，创建主文件夹，权限700 -c 说明内容 -d 指定某个路径为主文件夹 -r 创建系统账号 -s 接shell -e 账号失效日期&#39;YYYY-MM-DD&#39;,对于shadow第8个字段 -f 指定密码失效时间 0表示立刻失效，-1 表示永不失效 # 创建账号 useradd test # 设置密码 passwd test    在 /etc/passwd 里面创建一行与帐号相关的数据，包括创建 UID/GID/主文件夹等； 在 /etc/shadow 里面将此帐号的密码相关参数填入，但是尚未有密码； 在 /etc/group 里面加入一个与帐号名称一模一样的群组名称； 在 /home 下面创建一个与帐号同名的目录作为使用者主文件夹，且权限为 700 /etc/default/useradd 文件包含创建用户的初始化详细设定  passwd 设置密码]]></description>
</item><item>
    <title>Linux软链接和硬链接</title>
    <link>https://ZevaXu.github.io/linux%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/</link>
    <pubDate>Mon, 09 May 2022 10:00:40 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/linux%E8%BD%AF%E9%93%BE%E6%8E%A5%E5%92%8C%E7%A1%AC%E9%93%BE%E6%8E%A5/</guid>
    <description><![CDATA[Hard link 实体链接、硬链接
预备知识  每个文件都会占用一个 inode ，文件内容由 inode 的记录来指向； 想要读取该文件，必须要经过目录记录的文件名来指向到正确的 inode 号码才能读取。 文件名只与目录有关，但是文件内容则与 inode 有关。  原理 hard link是在某个目录下新增一个文件名，连接到某个inode号码。
1  ll -i [文件名] # 显示文件的inode号码   建立一个硬链接后，再次查看两个文件名的inode。
两个是一样的，权限字段后的数字2表示有多少个文件名链接到此inode。
好处 如果你将任何一个“文件名”删除，其实 inode 与 block 都还是存在的！ 此时你可以通过另一个“文件名”来读取到正确的文件数据喔！此外，不论你使用哪个“文件名”来编辑， 最终的结果都会写入到相同的 inode 与 block 中，因此均能进行数据的修改。
限制  不支持为目录创建hard link 不能跨文件系统  Symbolic link 符号链接、软链接
Symbolic link 就是在创建一个独立的文件，而这个文件会让数据的读取指向他 link 的那个文件的文件名！由于只是利用文件来做为指向的动作， 所以，当来源文件被删除之后，symbolic link 的文件会“开不了”，也就是找不到原始的文件名。
实操 删除之前创建的硬链接，再新建一个软链接，可以看到，实际上是新建立的一个新的文件，拥有和原始文件不同的inode。
该文件大小是7bytes，是因为箭头右边的文件名字符数量是7个。
这个 Symbolic Link 与 Windows 的捷径可以给他划上等号，由 Symbolic link所创建的文件为一个独立的新的文件，所以会占用掉 inode 与 block 。]]></description>
</item><item>
    <title>VPS配置SSH密钥登录</title>
    <link>https://ZevaXu.github.io/vps%E9%85%8D%E7%BD%AEssh%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</link>
    <pubDate>Mon, 09 May 2022 09:57:42 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/vps%E9%85%8D%E7%BD%AEssh%E5%AF%86%E9%92%A5%E7%99%BB%E5%BD%95/</guid>
    <description><![CDATA[基本配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  #新建一个user sudo useradd -d /home/xzh xzh # 为其设置密码 passwd xzh # 配置基本配置文件（环境变量等） cp ./bashrc /home/xzh/.bashrc cp ./bash_profile /home/xzh/.bash_profile # 改变 配置文件属性 chown xzh /home/xzh/.bashrc chmod 760 /home/xzh/.bash_profile # 自定义$PS1变量（每条命令前面显示的格式） PS1=&#34;\[\e[37;40m\][\[\e[32;40m\]\u\[\e[37;40m\]@\h \[\e[36;40m\]\w\[\e[0m\]]\\$ &#34; 追加到.bashrc中 # 切换到xzh su xzh   通过密码登录VPS 1 2 3  # 通过ssh登录到主机 ssh xzh@ip &gt;&gt; 输入密码   配置ssh_key登录VPS 1  ssh-keygen -t rsa # 生成一对 rsa 私钥和公钥在 ～/.]]></description>
</item><item>
    <title>部署web应用程序到centos系统遇到的防火墙问题及解决</title>
    <link>https://ZevaXu.github.io/%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%B0centos%E7%B3%BB%E7%BB%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</link>
    <pubDate>Wed, 26 Jan 2022 22:59:59 &#43;0800</pubDate>
    <author>Author</author>
    <guid>https://ZevaXu.github.io/%E9%83%A8%E7%BD%B2web%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%88%B0centos%E7%B3%BB%E7%BB%9F%E9%81%87%E5%88%B0%E7%9A%84%E9%98%B2%E7%81%AB%E5%A2%99%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</guid>
    <description><![CDATA[最初的目的 最近用go写了一个在线剪贴板的web小项目，在本地主机上调试了感觉还行，遂打算部署到甲骨文的VPS上（centos-8）。
环境搭建好了之后，成功运行在8080端口，curl localhost:8080也可以正常获取到网页，但是我的浏览器远程就是无法访问。在stackoverflow搜索了解，感觉是VPS防火墙的问题。并有了以下的解决步骤。此外，在解决问题的过程中还发现了一个有趣的小工具&ndash;cockpid,一个在web端管理VPS的工具，是centos和redhat系统自带的。
解决过程 在开始之前，首先去VPS提供商管理页面设置好相应的防火墙规则。之后在对VPS的防火墙设置规则。
  查看VPS防火墙状态： sudo systemctl status firewalld 可以看到防火墙是正常运行的。
  查看VPS防火墙开启的端口和服务 firewall-cmd --list-all 可以看到，我的VPS开启了cockpit dhcpv6-client http ssh这些个服务，以及一个8080端口（这是我主动开启之后的显示，一开始只有cockpit dhcpv6-client ssh这三项）。
如果想要查看某个服务占据的端口，可以用grep ssh /etc/services这个命令(以ssh为例)，可以看到ssh使用的是本机22端口。   开启希望的服务和端口。 开启http服务（即80端口）：sudo firewall-cmd --add-service=http --permanent 开启自定义端口：firewall-cmd --zone=public --permanent --remove-port 8080 不仅可以开端口，也可以关：firewall-cmd --zone=public --permanent --remove-service http
但是最后一定要重载以下使之生效：firewall-cmd --reload
之后可以再用firewall-cmd --list-all命令查看有没有成功。
  4.经过上述操作，我已经可以通过浏览器正常访问到我部署的web服务了，大功告成！ Cockpid 在之前查看VPS防火墙开启的端口和服务一步骤中，我看到有个名叫Cockpid的服务，一开始以为是个恶意程序（挖坑、肉鸡）,谨慎的上谷歌查了查，原来这家伙是centos自带的一个web端LINUX系统管理程序，这是它的官网（https://cockpit-project.org），这是它的一些介绍,以及安装过程。
安装好之后，只需要打开URL（VPD的域名或IP地址:9090），即可使用。下图是cockpid的登陆界面： 我的VPS设置为ssh keys方式登陆，cockpid网页似乎只能通过用户名和密码登录，于是我先建了一个用户并登录，这是有关linux如何创建用户的说明。
以下是cockpid提供的一些功能截图： 参考： [1] How to open and close ports on RHEL 8 / CentOS 8 Linux [2] How To Open Port 80 on CentOS [3] How to List Open Ports in Firewalld]]></description>
</item></channel>
</rss>
